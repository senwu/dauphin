#!/usr/bin/env python

import argparse
import logging

from emmental.utils.parse_args import parse_args
from emmental.utils.utils import nullable_float, nullable_int, nullable_string, str2bool

from dauphin.image.image import main

logger = logging.getLogger(__name__)


def add_application_args(parser):

    # Application configuration
    application_config = parser.add_argument_group("Application configuration")

    application_config.add_argument(
        "--task",
        type=str,
        default="cifar10",
        choices=["cifar10", "cifar100", "mnist", "ImageNet"],
        help="Task name"
    )

    application_config.add_argument(
        "--data", type=str, required=True, help="Data directory"
    )

    application_config.add_argument(
        "--batch_size", type=int, default=128, help="Batch size"
    )

    application_config.add_argument(
        "--valid_batch_size", type=nullable_int, default=None, help="Validation batch size"
    )

    application_config.add_argument(
        "--train", type=str2bool, default=True, help="Whether training or not"
    )

    application_config.add_argument(
        "--model",
        type=str,
        default="wide_resnet",
        choices=["wide_resnet", "mlp", "shake_shake", "pyramidnet", "resnet"],
        help="Which model to use"
    )

    # Resnet model config
    application_config.add_argument(
        "--resnet_depth", type=int, default=50, help="Resnet depth"
    )
    
    # Wide Resnet model config
    application_config.add_argument(
        "--wide_resnet_depth", type=int, default=28, help="Wide Resnet depth"
    )

    application_config.add_argument(
        "--wide_resnet_width", type=int, default=10, help="Wide Resnet width"
    )

    application_config.add_argument(
        "--wide_resnet_dropout", type=float, default=0.0, help="Dropout for Wide Resnet model"
    )

    # MLP config
    application_config.add_argument(
        "--mlp_hidden_dim", type=int, default=100, help="Hidden dim of MLP"
    )

    # Shake shake model config
    application_config.add_argument(
        "--shake_shake_depth", type=int, default=26, help="Shake shake depth"
    )

    application_config.add_argument(
        "--shake_shake_base_channels", type=int, default=96, help="Shake shake base channels"
    )

    application_config.add_argument(
        "--shake_shake_shake_forward", type=str2bool, default=True, help="Shake shake shake forward"
    )

    application_config.add_argument(
        "--shake_shake_shake_backward", type=str2bool, default=True, help="Shake shake shake backward"
    )

    application_config.add_argument(
        "--shake_shake_shake_image", type=str2bool, default=True, help="Shake shake shake image"
    )

    # Pyramidnet model config
    application_config.add_argument(
        "--pyramidnet_depth", type=int, default=272, help="Pyramidnet depth"
    )

    application_config.add_argument(
        "--pyramidnet_alpha", type=int, default=200, help="Pyramidnet alpha"
    )

    application_config.add_argument(
        "--pyramidnet_bottleneck", type=str2bool, default=True, help="Pyramidnet bottleneck"
    )

    # Augmentation config
    application_config.add_argument(
        "--augment_policy",
        type=nullable_string,
        default=None,
        help="Augmentation policy"
    )

    application_config.add_argument(
        "--augment_k",
        type=nullable_int,
        default=None,
        help="How many augmented samples to explore per sample"
    )

    application_config.add_argument(
        "--augment_enlarge",
        type=int,
        default=1,
        help="How many times to enlarge the batch"
    )

    application_config.add_argument(
        "--num_comp",
        type=int,
        default=1,
        help="Number of transformation composition in augmentation, defaults to 1"
    )


if __name__ == "__main__":
    # Parse cmdline args and setup environment
    parser = argparse.ArgumentParser(
        description="Commandline interface for image augmentation applications.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )

    parser = parse_args(parser=parser)
    add_application_args(parser)

    args = parser.parse_args()

    main(args)
